#==================================================================================================================================
# This example shows the use of MQTT (probably the most used message queue in IoT).
# To know more about MQTT, visit: https://mqtt.org/
#
# Messages received from a MQTT broker will be converted to be a string having following pairs:
#     "payload = <the_payload>, qos = <the_quality_of_service>, duplicate = <true_or_false>, retained = <true_or_false>"
# This string can be converted into pairs() top be managed easily.
#
# On the other side, messages to be sent have to be an string and will have following pairs:
#     "topic = <a_name>, payload = <what_to_send>, qos = <0_or_1_or_2>, retained = <true_or_false>"
#
# Mandatory pairs are: 'topic' and 'payload'. By default 'qos' is 2 and 'retained' is false.
#
# The suggested way to create a message is by using Une 'pair' data type:
#     pairs():put( "topic", "doors" ):put( "payload", "main;open" ):build()
#
# Following message is equivalent to the previous one:
#     pairs():put( "topic", "doors" ):put( "payload", "main;open" ):put( "qos", 2 ):put( "retanied", false ):build()
#
#
# In this example we send messages to a MQTT broker just for testing. But keep in mind that interacting with any MQTT is
# very similar despiting of what you send and/or receive.
#
# The service used in this example (created by IBM) attends on: mqtt.eclipseprojects.io
# And currently listens on the following ports:
#      * 1883 : MQTT over unencrypted TCP
#      * 8883 : MQTT over encrypted TCP
#      *   80 : MQTT over unencrypted WebSockets (note: URL must be /mqtt )
#      *  443 : MQTT over encrypted WebSockets (note: URL must be /mqtt )
#
# This service just send back what is sent to it: it somekind of an echo.
#
# ---------------------------------------------------------------------------------------------------------------------------------
#
# NOTE ABOUT Paho MQTT Java library
# ---------------------------------
# This is the lib that this Driver uses internally (it could change in the future).
#
# The org.eclipse.paho.client.mqttv3.IMqttClient interface and the Eclipse Paho MQTT client library don't provide direct control
# over the internal folder where the client stores its data, such as persisted messages and other internal state. This is typically
# controlled by the library itself and its default settings.
#
# The internal storage location is often determined by the library's configuration and is usually tied to the user's home directory
# or another platform-specific location. You can configure some aspects of the MQTT client, but the location of internal storage
# folders is usually not one of them.
#
# ---------------------------------------------------------------------------------------------------------------------------------
#
# For more information about Drivers, pleaser refer to the "Mingle Standard Platform" handbook.
#
# ---------------------------------------------------------------------------------------------------------------------------------
# This file is part of the Mingle project, which is licensed under Apache 2.0 License
#
# @author : Francisco JosÃ© Morero Peyrona
# @project: https://github.com/peyrona/mingle
#==================================================================================================================================


DEVICE t_garage                                                  # Emulates the temperature at garage
    DRIVER MqttClientDriver
        CONFIG
             uri       SET "tcp://mqtt.eclipseprojects.io:1883"  # [schema = tcp] [host = mqtt.eclipseprojects.io] [port = 1883]
             subscribe SET "GARAGE_TEMPERATURE , 2"              # [topic = GARAGE_TEMPERATURE] [QoS = 2]
                                                                 # More than one topic can be added: use ';' to separate topics.

DEVICE console
    DRIVER OutputDriver


# The broker sent a message, this message becomes the device t_garage's new value

WHEN t_garage:len() > 0
    THEN console SET "Message received: "+ t_garage              # Shows all message information
         console SET "Temperature     : "+ t_garage:get( "payload" )   # Shows just the payload: new temperature (min 18, max 24)

#==================================================================================================================================

DEVICE clock
    DRIVER ClockDriver
        CONFIG
            interval SET 7s


# Following command shows how to send messages to the MQTT broker: by writting a new value to the device 't_garage' what we are
# really doing is sending this new value to the MQTT broker, which will return back the same message.

WHEN clock > 0                                                   # Triggered every 7 seconds
THEN t_garage SET pair():put( "topic"  , "GARAGE_TEMPERATURE" ) \
                        :put( "payload", rand( 18, 24 ) )        # Random temperature between 18 and 24

# >>>>>>>>>>>>>> EOF <<<<<<<<<<<<<<<<