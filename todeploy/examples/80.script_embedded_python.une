#==================================================================================================================================
# This application shows how to use other language to perform small tasks (scripts).
# This is called "embedded" (AKA 'inline') code, and allows to mix Une code with other languages (JavScript, Python, Java, etc).
#
# Although there is no limitation to the size of embedded source code, long pieces should not be mixed with Une source code: just
# for clarity sake.
#
# Each SCRIPT is executed by ExEn in its own thread. Therefore execution order is not guaranteed.
#
# For more information, pleaser refer to the "Mingle Standard Platform" handbook.
#
# Note: intentionally, this example does not INCLUDE the normal "standard-replaces.une" (it is not needed)
#
# ---------------------------------------------------------------------------------------------------------------------------------
# This file is part of the Mingle project. the Mingle project is licensed under Apache 2.0 License
#
# @author : Francisco JosÃ© Morero Peyrona
# @project: https://github.com/peyrona/mingle
#==================================================================================================================================


SCRIPT Python_1
   ONSTART
   LANGUAGE Python     # As Python is indent dependet, you have to write its code starting from right margin
   FROM {

from java.time import LocalTime                                       # All Java APIs are accesible from JPython

print( "Hello Mingle world from Python." )
print( "Time is: "+ str( LocalTime.now() ) )
        }

# CALL "doIt"  --> It is not needed because it is in Python code.

SCRIPT Python_2
   ONSTART
   LANGUAGE python
   FROM {

def doIt():
    for x in _exen_rt_.all("scripts"):                               # ExEn RunTime instance is injected into '_exen_rt_'
        print("There is a script named '"+ x.name() +"'")
    return

doIt()                                                               # This makes the SCRIPT command CALL clause innecesary
_exen_rt_.exit(3000,0)                                               # Ends ExEn execution in 3 seconds (this is rarely used)

        }

# >>>>>>>>>>>>>> EOF <<<<<<<<<<<<<<<<