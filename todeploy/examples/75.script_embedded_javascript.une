#==================================================================================================================================
# This example shows how to use other language to perform small tasks (scripts).
# This is called "embedded" (AKA 'inline') code, and allows to mix Une code with other languages (JavScript, Python, Java, etc).
#
# Although there is no limitation to the size of embedded source code, long pieces should not be mixed with Une source code: just
# for clarity sake.
#
# Each SCRIPT is executed by ExEn in its own thread. Therefore execution order is not guaranteed.
#
# For more information, pleaser refer to the "Mingle Standard Platform" handbook.
#
# Note: intentionally, this example does not INCLUDE the normal "standard-replaces.une" (it is not needed)
#
# ---------------------------------------------------------------------------------------------------------------------------------
# This file is part of the Mingle project. the Mingle project is licensed under Apache 2.0 License
#
# @author : Francisco Jos√© Morero Peyrona
# @project: https://mingle.peyrona.com
#==================================================================================================================================


SCRIPT JavaScript_1
   LANGUAGE JavaScript
   ONSTART
   FROM {
            print( "Hello Mingle world from JavaScript.\n"+
                   "Time is: "+ java.time.LocalTime.now() );             // All Java APIs are accesible from JavaScript
        }


SCRIPT JavaScript_2
   LANGUAGE JavaScript
   ONSTART
   FROM {
            doIt();                                                      // This makes the SCRIPT command CALL clause innecesary.

            function doIt()
            {
                var scripts = _exen_rt_.all( "scripts" );                // ExEn RunTime instance is injected into '_exen_rt_'

                for( var n = 0; n < scripts.length; n++ )
                    print( "There is an script named '"+ scripts[n].name() +"'" );

                _exen_rt_.exit( 3000, 0 );                               // exit(...) Ends ExEn execution in 3 seconds (rarely used)
            }
        }

# >>>>>>>>>>>>>> EOF <<<<<<<<<<<<<<<<