
package com.peyrona.mingle.glue.exen.commands;

import com.peyrona.mingle.glue.JTools;
import com.peyrona.mingle.glue.Tip;
import com.peyrona.mingle.glue.exen.ExEnClient;
import com.peyrona.mingle.glue.gswing.GList;
import com.peyrona.mingle.lang.interfaces.commands.ICommand;
import com.peyrona.mingle.lang.interfaces.commands.IDevice;
import com.peyrona.mingle.lang.interfaces.commands.IDriver;
import com.peyrona.mingle.lang.interfaces.commands.IRule;
import com.peyrona.mingle.lang.interfaces.commands.IScript;
import com.peyrona.mingle.lang.interfaces.network.INetClient;
import com.peyrona.mingle.lang.japi.ExEnComm;
import com.peyrona.mingle.lang.japi.UtilStr;
import com.peyrona.mingle.lang.japi.UtilSys;
import com.peyrona.mingle.lang.japi.UtilUnit;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.Icon;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import jiconfont.icons.font_awesome.FontAwesome;
import jiconfont.swing.IconFontSwing;

/**
 * Panel showing a listbox for every command and buttons to edit the highlighted.
 *
 * @author Francisco Jos√© Morero Peyrona
 *
 * Official web site at: <a href="https://github.com/peyrona/mingle">https://github.com/peyrona/mingle</a>
 */
public class PnlAllCmdsSelector
       extends javax.swing.JPanel
{
    private final ExEnClient     exenClient;
    private final GList<IScript> ltbScript;
    private final GList<IDriver> ltbDriver;
    private final GList<IDevice> ltbDevice;
    private final GList<IRule>   ltbRule;
    private final CommandWise    cmdWise;

    //------------------------------------------------------------------------//
    // CONSTRUCTOR

    public PnlAllCmdsSelector( ExEnClient exenClient )
    {
        this.exenClient = exenClient;
        this.cmdWise    = new CommandWise();      // Don't move: has to be here

        initComponents();

        ltbScript = new GList<>( lstScript );     // Don't move: has to be here
        ltbDriver = new GList<>( lstDriver );
        ltbRule   = new GList<>( lstRule   );
        ltbDevice = new GList<>( lstDevice );

        initExtra();
        refreshButtons();
        this.exenClient.add( new ClientListener() );
    }

    //------------------------------------------------------------------------//
    // PUBLIC

    public List<IDevice> getDevices()
    {
        return ltbDevice.getAll();
    }

    public void deleteAll()
    {
        exenClient.sendSetOfCmds( ExEnComm.Request.Remove, cmdWise.getAll() );
    }

    public String getUneSourceCode()
    {
        JTools.showWaitFrame( "Generating Une source code..." );

        StringBuilder sb = new StringBuilder( 24 * UtilUnit.KILO_BYTE );

        sb.append( "#==================================================================================================================================\n" )
          .append( "#\n" )
          .append( "# Une source code generated by Glue (an Mingle GUI) on " ).append( LocalDate.now() ).append( " at " ).append( LocalTime.now().truncatedTo( ChronoUnit.SECONDS ) ).append( '\n' )
          .append( "#\n" )
          .append( "#==================================================================================================================================\n\n" );

        sb.append( "INCLUDE \"file://{*home.inc*}standard-includes.une\"\n" )
          .append( "#************************************\n" )
          .append( "# Add here any other needed include *\n" )
          .append( "#************************************\n\n" );

        cmdWise.getDevices().forEach( device -> sb.append( new PnlDevice( device, cmdWise, null ).getSourceCode() ).append( "\n\n" ) );
        cmdWise.getRules().forEach(   rule   -> sb.append( new PnlRule(   rule  , cmdWise       ).getSourceCode() ).append( "\n\n" ) );
        cmdWise.getDrivers().forEach( driver -> sb.append( new PnlDriver( driver, cmdWise       ).getSourceCode() ).append( "\n\n" ) );
        cmdWise.getScripts().forEach( script -> sb.append( new PnlScript( script, cmdWise       ).getSourceCode() ).append( "\n\n" ) );

        UtilStr.removeLast( sb, 1 );

        sb.append( "#>>>>>>>>>>>>>> EOF <<<<<<<<<<<<<<<<" );

        JTools.hideWaitFrame();

        return sb.toString();
    }

    //------------------------------------------------------------------------//
    // PRIVATE SCOPE

    /**
     * Passed request lives in the ExEn or was sent by someone (even this Glue) to the ExEn.
     *
     * @param cmd
     */
    private void added( ICommand cmd )
    {
        getListBoxFor( cmd ).add( cmd );
        refreshButtons();
    }

    /**
     * An existing request that was living in the ExEn was removed by someone (even this Glue) from the ExEn.
     *
     * @param cmd
     */
    private void removed( ICommand cmd )
    {
        getListBoxFor( cmd ).remove( cmd );
        refreshButtons();
    }

    private void clone( GList<? extends ICommand> listbox )
    {
        ICommand cmd   = listbox.getSelected();
        int      items = listbox.getAll().size();
        int      incr  = 1;                         // Used to suggest new commands name (e.g.: MyRule_1)
        String   name  = cmd.name() +'_'+ incr;

        while( true )
        {
            int n = 0;

            for( ; n < items; n++ )
            {
                if( listbox.get( n ).name().equalsIgnoreCase( name ) )
                    break;
            }

            if( n == items )
                break;
            else
                name = cmd.name() +'_'+ incr++;
        }

        exenClient.sendClone( cmd, name );
    }

    private void del( ICommand which )
    {
        String sExtra = "";

             if( which instanceof IScript ) sExtra = "\n(all Drivers and Devices associated with this Script will be also deleted)";
        else if( which instanceof IDriver ) sExtra = "\n(all Devices associated with this Driver will be also deleted)";

        if( JTools.confirm( "Are you sure you want to delete selected command?" + sExtra ) )
        {
            exenClient.sendDel( which );

            if( ! sExtra.isEmpty() )      // When Script or Driver is sent devices will be removed but it is
            {                             // not ExEn resposibility to inform about these collateral effects
                ltbScript.clear();
                ltbDriver.clear();
                ltbRule.clear();
                ltbDevice.clear();

                exenClient.sendList();
            }
        }
    }

    private void edit( final Class clazz, final ICommand cmd )
    {
        final JPanel panel;

        String sErr = null;

             if( (clazz == IRule.class  ) && cmdWise.getDevices().isEmpty() ) sErr = "Can not create a RULE when the list of DEVICES is empty";
        else if( (clazz == IDevice.class) && cmdWise.getDrivers().isEmpty() ) sErr = "Can not create a DEVICE when the list of DRIVERS is empty";

        if( sErr != null )
        {
            JTools.alert( sErr );
            return;
        }

             if( clazz == IScript.class )  panel = new PnlScript( (IScript) cmd, cmdWise );
        else if( clazz == IDriver.class )  panel = new PnlDriver( (IDriver) cmd, cmdWise );
        else if( clazz == IDevice.class )  panel = new PnlDevice( (IDevice) cmd, cmdWise, exenClient );
        else                               panel = new PnlRule(   (IRule  ) cmd, cmdWise );

        String msg;

             if( clazz == IScript.class )  msg = "SCRIPT dialog is used to create new SCRIPTs.\n\nTo load SCRIPTs from file, click on folder icon at application toolbar.\n\nAnd do not fortget: when a DRIVER is loaded, its associated SCRIPT is automatically loaded too.";
        else if( clazz == IDriver.class )  msg = "DRIVER dialog is used to create new DRIVERs.\n\nTo load DRIVERSs from file, click on folder icon at application toolbar.";
        else if( clazz == IDevice.class )  msg = null;
        else                               msg = null;

        if( msg != null )
            Tip.show( msg );

        String title = panel.getClass().getSimpleName().substring( 3 );

        new Dlg4Cmd( title +" Command Editor", panel,
                        (ActionEvent ae) ->
                         {
                             String cmdNew = ((PnlCmdBase) panel).getTranspiled();

                             if( cmdNew != null )
                             {
                                 JTools.getParent( (Component) ae.getSource(), Dlg4Cmd.class ).dispose();

                                 ICommand cmd2Add = UtilSys.getConfig().newCILBuilder().build( cmdNew );

                                 if( cmd != null )
                                     exenClient.sendReplace( cmd, cmd2Add );
                                 else
                                     exenClient.sendAdd( cmd2Add );
                             }
                         }
                   ).setVisible( true );
    }

    private GList getListBoxFor( ICommand cmd )
    {
             if( cmd instanceof IScript )  return ltbScript;
        else if( cmd instanceof IDriver )  return ltbDriver;
        else if( cmd instanceof IDevice )  return ltbDevice;
        else                               return ltbRule;
    }

    private void refreshButtons()
    {
        btnScriptEdit.setEnabled(  ltbScript.isNotEmpty() );
        btnScriptClone.setEnabled( ltbScript.isNotEmpty() );
        btnScriptDel.setEnabled(   ltbScript.isNotEmpty() );

        btnDriverEdit.setEnabled(  ltbDriver.isNotEmpty() );
        btnDriverClone.setEnabled( ltbDriver.isNotEmpty() );
        btnDriverDel.setEnabled(   ltbDriver.isNotEmpty() );

        btnRuleEdit.setEnabled(    ltbRule.isNotEmpty()   );
        btnRuleClone.setEnabled(   ltbRule.isNotEmpty()   );
        btnRuleDel.setEnabled(     ltbRule.isNotEmpty()   );

        btnDeviceEdit.setEnabled(  ltbDevice.isNotEmpty() );
        btnDeviceClone.setEnabled( ltbDevice.isNotEmpty() );
        btnDeviceDel.setEnabled(   ltbDevice.isNotEmpty() );
    }

    private void initExtra()
    {
        Icon iconNew   = IconFontSwing.buildIcon( FontAwesome.PLUS  , 16, JTools.getIconColor() );
        Icon iconEdit  = IconFontSwing.buildIcon( FontAwesome.PENCIL, 16, JTools.getIconColor() );
        Icon iconClone = IconFontSwing.buildIcon( FontAwesome.CLONE , 16, JTools.getIconColor() );
        Icon iconDel   = IconFontSwing.buildIcon( FontAwesome.TRASH , 16, JTools.getIconColor() );

        btnScriptNew.setIcon( iconNew );
        btnDriverNew.setIcon( iconNew );
        btnDeviceNew.setIcon( iconNew );
        btnRuleNew.setIcon(   iconNew );

        btnScriptEdit.setIcon( iconEdit );
        btnDriverEdit.setIcon( iconEdit );
        btnDeviceEdit.setIcon( iconEdit );
        btnRuleEdit.setIcon(   iconEdit );

        btnScriptClone.setIcon( iconClone );
        btnDriverClone.setIcon( iconClone );
        btnDeviceClone.setIcon( iconClone );
        btnRuleClone.setIcon(   iconClone );

        btnScriptDel.setIcon( iconDel );
        btnDriverDel.setIcon( iconDel );
        btnDeviceDel.setIcon( iconDel );
        btnRuleDel.setIcon(   iconDel );

        ltbScript.setCaptionFn( (cmd) -> cmd.name() );
        ltbDriver.setCaptionFn( (cmd) -> cmd.name() );
        ltbDevice.setCaptionFn( (cmd) -> cmd.name() );
        ltbRule.setCaptionFn(   (cmd) -> cmd.name() );

        ltbScript.onPicked( (cmd) -> edit( IScript.class, cmd ) );
        ltbDriver.onPicked( (cmd) -> edit( IDriver.class, cmd ) );
        ltbDevice.onPicked( (cmd) -> edit( IDevice.class, cmd ) );
        ltbRule.onPicked(   (cmd) -> edit( IRule.class  , cmd ) );

        btnScriptNew.addActionListener(   evt -> edit(  IScript.class, null ) );
        btnScriptEdit.addActionListener(  evt -> edit(  IScript.class, ltbScript.getSelected() ) );
        btnScriptClone.addActionListener( evt -> clone( ltbScript ) );
        btnScriptDel.addActionListener(   evt -> del(   ltbScript.getSelected() ) );

        btnDriverNew.addActionListener(   evt -> edit(  IDriver.class, null ) );
        btnDriverEdit.addActionListener(  evt -> edit(  IDriver.class, ltbDriver.getSelected() ) );
        btnDriverClone.addActionListener( evt -> clone( ltbDriver ) );
        btnDriverDel.addActionListener(   evt -> del(   ltbDriver.getSelected() ) );

        btnDeviceNew.addActionListener(   evt -> edit(  IDevice.class, null ) );
        btnDeviceEdit.addActionListener(  evt -> edit(  IDevice.class, ltbDevice.getSelected() ) );
        btnDeviceClone.addActionListener( evt -> clone( ltbDevice ) );
        btnDeviceDel.addActionListener(   evt -> del(   ltbDevice.getSelected() ) );

        btnRuleNew.addActionListener(     evt -> edit(  IRule.class, null ) );
        btnRuleEdit.addActionListener(    evt -> edit(  IRule.class, ltbRule.getSelected() ) );
        btnRuleClone.addActionListener(   evt -> clone( ltbRule  ) );
        btnRuleDel.addActionListener(     evt -> del(   ltbRule.getSelected() ) );
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        pnlCommands = new javax.swing.JPanel();
        lblRules = new javax.swing.JLabel();
        btnRuleNew = new javax.swing.JButton();
        btnRuleEdit = new javax.swing.JButton();
        btnRuleClone = new javax.swing.JButton();
        btnRuleDel = new javax.swing.JButton();
        spRule = new javax.swing.JScrollPane();
        lstRule = new javax.swing.JList<>();
        lblDevices = new javax.swing.JLabel();
        btnDeviceNew = new javax.swing.JButton();
        btnDeviceEdit = new javax.swing.JButton();
        btnDeviceClone = new javax.swing.JButton();
        btnDeviceDel = new javax.swing.JButton();
        spDevice = new javax.swing.JScrollPane();
        lstDevice = new javax.swing.JList<>();
        lblDrivers = new javax.swing.JLabel();
        btnDriverNew = new javax.swing.JButton();
        btnDriverEdit = new javax.swing.JButton();
        btnDriverClone = new javax.swing.JButton();
        btnDriverDel = new javax.swing.JButton();
        spDriver = new javax.swing.JScrollPane();
        lstDriver = new javax.swing.JList<>();
        lblScripts = new javax.swing.JLabel();
        btnScriptNew = new javax.swing.JButton();
        btnScriptEdit = new javax.swing.JButton();
        btnScriptClone = new javax.swing.JButton();
        btnScriptDel = new javax.swing.JButton();
        spScript = new javax.swing.JScrollPane();
        lstScript = new javax.swing.JList<>();

        pnlCommands.setName("pnlCommands"); // NOI18N

        lblRules.setFont(lblRules.getFont().deriveFont(lblRules.getFont().getStyle() | java.awt.Font.BOLD, lblRules.getFont().getSize()+2));
        lblRules.setText("Rules");

        btnRuleNew.setToolTipText("Create new item");
        btnRuleNew.setFocusPainted(false);

        btnRuleEdit.setToolTipText("Edit highlighted item");
        btnRuleEdit.setFocusPainted(false);

        btnRuleClone.setToolTipText("Clone highlighted item");
        btnRuleClone.setFocusPainted(false);

        btnRuleDel.setToolTipText("Remove highlighted item");
        btnRuleDel.setFocusPainted(false);

        lstRule.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstRule.setVisibleRowCount(12);
        spRule.setViewportView(lstRule);

        lblDevices.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        lblDevices.setText("Devices");

        btnDeviceNew.setToolTipText("Create new item");
        btnDeviceNew.setFocusPainted(false);

        btnDeviceEdit.setToolTipText("Edit highlighted item");
        btnDeviceEdit.setFocusPainted(false);

        btnDeviceClone.setToolTipText("Clone highlighted item");
        btnDeviceClone.setFocusPainted(false);

        btnDeviceDel.setToolTipText("Remove highlighted item");
        btnDeviceDel.setFocusPainted(false);

        lstDevice.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstDevice.setVisibleRowCount(12);
        spDevice.setViewportView(lstDevice);

        lblDrivers.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        lblDrivers.setText("Drivers");

        btnDriverNew.setToolTipText("Create new item");
        btnDriverNew.setFocusPainted(false);

        btnDriverEdit.setToolTipText("Edit highlighted item");
        btnDriverEdit.setFocusPainted(false);

        btnDriverClone.setToolTipText("Clone highlighted item");
        btnDriverClone.setFocusPainted(false);

        btnDriverDel.setToolTipText("Remove highlighted item");
        btnDriverDel.setFocusPainted(false);

        lstDriver.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstDriver.setVisibleRowCount(12);
        spDriver.setViewportView(lstDriver);

        lblScripts.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        lblScripts.setText("Scripts");

        btnScriptNew.setToolTipText("Create new item");
        btnScriptNew.setFocusPainted(false);

        btnScriptEdit.setToolTipText("Edit highlighted item");
        btnScriptEdit.setFocusPainted(false);

        btnScriptClone.setToolTipText("Clone highlighted item");
        btnScriptClone.setFocusPainted(false);

        btnScriptDel.setToolTipText("Remove highlighted item");
        btnScriptDel.setFocusPainted(false);

        lstScript.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstScript.setVisibleRowCount(12);
        spScript.setViewportView(lstScript);

        javax.swing.GroupLayout pnlCommandsLayout = new javax.swing.GroupLayout(pnlCommands);
        pnlCommands.setLayout(pnlCommandsLayout);
        pnlCommandsLayout.setHorizontalGroup(
            pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCommandsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblRules)
                    .addGroup(pnlCommandsLayout.createSequentialGroup()
                        .addGroup(pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnRuleNew)
                                .addComponent(btnRuleEdit)
                                .addComponent(btnRuleClone))
                            .addComponent(btnRuleDel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spRule, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCommandsLayout.createSequentialGroup()
                        .addGroup(pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDeviceNew, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnDeviceEdit, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnDeviceClone, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnDeviceDel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spDevice, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE))
                    .addComponent(lblDevices))
                .addGap(18, 18, 18)
                .addGroup(pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCommandsLayout.createSequentialGroup()
                        .addGroup(pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDriverNew)
                            .addComponent(btnDriverEdit)
                            .addComponent(btnDriverDel)
                            .addComponent(btnDriverClone, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spDriver, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE))
                    .addComponent(lblDrivers))
                .addGap(18, 18, 18)
                .addGroup(pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCommandsLayout.createSequentialGroup()
                        .addGroup(pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnScriptNew)
                            .addComponent(btnScriptEdit)
                            .addComponent(btnScriptDel)
                            .addComponent(btnScriptClone))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spScript, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE))
                    .addComponent(lblScripts))
                .addContainerGap())
        );
        pnlCommandsLayout.setVerticalGroup(
            pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCommandsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlCommandsLayout.createSequentialGroup()
                        .addComponent(lblDevices)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlCommandsLayout.createSequentialGroup()
                                .addComponent(btnDeviceNew)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDeviceEdit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDeviceClone)
                                .addGap(18, 18, 18)
                                .addComponent(btnDeviceDel))
                            .addComponent(spDevice, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlCommandsLayout.createSequentialGroup()
                        .addComponent(lblScripts)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlCommandsLayout.createSequentialGroup()
                                .addComponent(btnScriptNew)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnScriptEdit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnScriptClone)
                                .addGap(18, 18, 18)
                                .addComponent(btnScriptDel))
                            .addComponent(spScript, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlCommandsLayout.createSequentialGroup()
                        .addComponent(lblDrivers)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlCommandsLayout.createSequentialGroup()
                                .addComponent(btnDriverNew)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDriverEdit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDriverClone)
                                .addGap(18, 18, 18)
                                .addComponent(btnDriverDel))
                            .addComponent(spDriver, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlCommandsLayout.createSequentialGroup()
                        .addComponent(lblRules)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlCommandsLayout.createSequentialGroup()
                                .addComponent(btnRuleNew)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRuleEdit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRuleClone)
                                .addGap(18, 18, 18)
                                .addComponent(btnRuleDel)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(spRule, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE))))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlCommands, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlCommands, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeviceClone;
    private javax.swing.JButton btnDeviceDel;
    private javax.swing.JButton btnDeviceEdit;
    private javax.swing.JButton btnDeviceNew;
    private javax.swing.JButton btnDriverClone;
    private javax.swing.JButton btnDriverDel;
    private javax.swing.JButton btnDriverEdit;
    private javax.swing.JButton btnDriverNew;
    private javax.swing.JButton btnRuleClone;
    private javax.swing.JButton btnRuleDel;
    private javax.swing.JButton btnRuleEdit;
    private javax.swing.JButton btnRuleNew;
    private javax.swing.JButton btnScriptClone;
    private javax.swing.JButton btnScriptDel;
    private javax.swing.JButton btnScriptEdit;
    private javax.swing.JButton btnScriptNew;
    private javax.swing.JLabel lblDevices;
    private javax.swing.JLabel lblDrivers;
    private javax.swing.JLabel lblRules;
    private javax.swing.JLabel lblScripts;
    private javax.swing.JList<IDevice> lstDevice;
    private javax.swing.JList<IDriver> lstDriver;
    private javax.swing.JList<IRule> lstRule;
    private javax.swing.JList<IScript> lstScript;
    private javax.swing.JPanel pnlCommands;
    private javax.swing.JScrollPane spDevice;
    private javax.swing.JScrollPane spDriver;
    private javax.swing.JScrollPane spRule;
    private javax.swing.JScrollPane spScript;
    // End of variables declaration//GEN-END:variables

    //------------------------------------------------------------------------//
    // INNER CLASS
    // Instrumentation class similar to IRuntime that provides access to all
    // existing IComands in this ExEn
    //------------------------------------------------------------------------//
    public final class CommandWise
    {
        public List<ICommand> getAll()
        {
            List<ICommand> lstCmds = new ArrayList<>();

            lstCmds.addAll( getScripts() );
            lstCmds.addAll( getDrivers() );
            lstCmds.addAll( getRules()   );
            lstCmds.addAll( getDevices() );

            return lstCmds;
        }

        public List<IScript> getScripts()
        {
            return ltbScript.getAll();
        }

        public List<IDriver> getDrivers()
        {
            return ltbDriver.getAll();
        }

        public List<IRule> getRules()
        {
            return ltbRule.getAll();
        }

        public List<IDevice> getDevices()
        {
            return ltbDevice.getAll();
        }

        public boolean isScript( String name )
        {
            for( IScript scp : getScripts() )
            {
                if( scp.name().equals( name ) )
                    return true;
            }

            return false;
        }

        public boolean isDriver( String name )
        {
            for( IDriver drv : getDrivers() )
            {
                if( drv.name().equals( name ) )
                    return true;
            }

            return false;
        }

        public boolean isRule( String name )
        {
            for( IRule rul : getRules() )
            {
                if( rul.name().equals( name ) )
                    return true;
            }

            return false;
        }

        public Set<String> getGroups( List<? extends IDevice> lstDevices )
        {
            Set<String> set = new HashSet<>();

            for( IDevice device : lstDevices )
                set.addAll( Arrays.asList( device.groups() ) );

            return set;
        }

        //------------------------------------------------------------------------//
        // PRIVATE CONSTRUCTOR

        private CommandWise()
        {
        }
    }

    //------------------------------------------------------------------------//
    // INNER CLASS
    //------------------------------------------------------------------------//
    private final class ClientListener implements INetClient.IListener
    {
        @Override
        public void onConnected( INetClient origin )
        {
            // Nothing to do
        }

        @Override
        public void onDisconnected( INetClient origin )
        {
            // Nothing to do
        }

        @Override
        public void onError( INetClient origin, Exception exc )
        {
            // Nothing to do
        }

        @Override
        public void onMessage( INetClient origin, String sJSON )
        {
            ExEnComm msg = ExEnComm.fromJSON( sJSON );

            SwingUtilities.invokeLater( () ->
                {
                    switch( msg.request )
                    {
                        case Listed:
                        case Added :
                            for( ICommand cmd : msg.getCommands() )
                                PnlAllCmdsSelector.this.added( cmd );

                            break;

                        case Removed:
                            for( ICommand cmd : msg.getCommands() )
                                PnlAllCmdsSelector.this.removed( cmd );

                            break;

                        case Error:
                            JTools.error( "Error received from ExEn at:"+ origin +"\n\n"+ msg.getErrorMsg() );
                            break;
                    }
                } );
        }
    }
}