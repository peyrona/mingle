
package com.peyrona.mingle.glue.exen.commands;

import com.peyrona.mingle.glue.JTools;
import com.peyrona.mingle.glue.Main;
import com.peyrona.mingle.glue.codeditor.UneEditorTabContent.UneEditorPane;
import com.peyrona.mingle.glue.codeditor.UneEditorTabContent.UneEditorUnit;
import com.peyrona.mingle.glue.exen.Pnl4ExEn;
import com.peyrona.mingle.glue.gswing.GFrame;
import com.peyrona.mingle.lang.interfaces.ICandi;
import com.peyrona.mingle.lang.interfaces.IXprEval;
import com.peyrona.mingle.lang.interfaces.commands.IDevice;
import com.peyrona.mingle.lang.japi.UtilColls;
import com.peyrona.mingle.lang.japi.UtilStr;
import com.peyrona.mingle.lang.japi.UtilSys;
import com.peyrona.mingle.lang.xpreval.XprTokenizer;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Consumer;
import java.util.function.Function;
import javax.swing.SwingUtilities;
import jiconfont.icons.font_awesome.FontAwesome;
import jiconfont.swing.IconFontSwing;

/**
 * Expression evaluation panel for testing and debugging Mingle expressions.
 * <p>
 * This panel provides an interactive environment where users can write and evaluate
 * Mingle expressions in real-time. It includes:
 * <ul>
 * <li>A text editor for entering expressions</li>
 * <li>Evaluation button to execute the expression</li>
 * <li>Result display showing evaluation output or errors</li>
 * <li>Clear button to reset the editor</li>
 * </ul>
 * The panel validates expressions for unsupported features like futures and variables
 * before evaluation.
 *
 * @author Francisco Jos√© Morero Peyrona
 *
 * Official web site at: <a href="https://github.com/peyrona/mingle">https://github.com/peyrona/mingle</a>
 */
final class PnlExprEval extends javax.swing.JPanel
{
    private final UneEditorPane pnlEditor = UneEditorUnit.newEditor( "" )
                                                         .hideLineNumbers()
                                                         .setRows( 12 )
                                                         .setColumns( 102 );

    //------------------------------------------------------------------------//

    /**
     * Creates new form PnlExprEval
     */
    PnlExprEval()
    {
        initComponents();

        btnTest.setMnemonic(  KeyEvent.VK_E );    // Evaluate
        btnClear.setMnemonic( KeyEvent.VK_D );    // Delete, Swipe, Erase

        btnTest.setToolTipText( "Evaluates the expression in the editor" );
        btnClear.setToolTipText( "Clear the expressions editor" );

        btnTest.setIcon(  IconFontSwing.buildIcon( FontAwesome.PLAY , 16, JTools.getIconColor() ) );
        btnClear.setIcon( IconFontSwing.buildIcon( FontAwesome.TRASH, 16, JTools.getIconColor() ) );

        pnlEditor.setText( "Write an expression..." )
                 .selectAll();

        pnlForEditor.setLayout( new BorderLayout() );
        pnlForEditor.add( pnlEditor, BorderLayout.CENTER );

        SwingUtilities.invokeLater( () -> pnlEditor.grabFocus() );
    }

    //------------------------------------------------------------------------//
    // Auxiliary functions

    private void showResult( String sResult )
    {
        lblResult.setForeground( Color.green.darker() );
        lblResult.setText( sResult );

        SwingUtilities.invokeLater( () -> pnlEditor.grabFocus() );
    }

    private void showError( String sError )
    {
        if( (sError.indexOf( '\n' ) > -1) || (sError.length() > 60) )
        {
            JTools.alert( sError );

            SwingUtilities.invokeLater( () -> JTools.getParent( this, GFrame.class ).toFront() );
        }
        else
        {
            lblResult.setForeground( Color.red.darker() );
            lblResult.getFont().deriveFont( lblResult.getFont().getSize() - 2.0f );
            lblResult.setText( sError );
        }
    }

    private void showError( List<ICandi.IError> lstErrors )
    {
        StringBuilder sb = new StringBuilder( 2048 );

        for( ICandi.IError error : lstErrors )
            sb.append( error.message() ).append( error ).append( '\n' );

        showError( UtilStr.removeLast( sb, 1 ).toString() );
    }

    //------------------------------------------------------------------------//

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        pnlForEditor = new javax.swing.JPanel();
        btnTest = new javax.swing.JButton();
        lblResult = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();

        javax.swing.GroupLayout pnlForEditorLayout = new javax.swing.GroupLayout(pnlForEditor);
        pnlForEditor.setLayout(pnlForEditorLayout);
        pnlForEditorLayout.setHorizontalGroup(
            pnlForEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        pnlForEditorLayout.setVerticalGroup(
            pnlForEditorLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 264, Short.MAX_VALUE)
        );

        btnTest.setText("Alt-E");
        btnTest.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnTestActionPerformed(evt);
            }
        });

        lblResult.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        lblResult.setText(" ");

        btnClear.setText("Alt-D");
        btnClear.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlForEditor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblResult, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTest)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClear)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlForEditor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblResult)
                    .addComponent(btnClear)
                    .addComponent(btnTest))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnTestActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnTestActionPerformed
    {//GEN-HEADEREND:event_btnTestActionPerformed
        String sXxpr = pnlEditor.getText();

        lblResult.setText( null );

        if( new XprTokenizer( sXxpr ).hasFuture() )
        {
            showError( "Can not evaluate expressions with futures (AFTER or WITHIN)" );
            return;
        }

        Function<String,String[]> fnGroupWise = (groupName) ->
                                                {
                                                    List<String>  list2Ret   = new ArrayList<>();
                                                    List<IDevice> lstDevices = ((Pnl4ExEn) Main.frame.getExEnTabsPane().getSelectedComponent()).getDevices();

                                                    for( IDevice device : lstDevices )
                                                    {
                                                        if( device.isMemberOfGroup( groupName ) )    // groupName comes in lower case: fine
                                                            list2Ret.add( device.name() );
                                                    }

                                                    return list2Ret.toArray( String[]::new );
                                                };

        IXprEval expr = UtilSys.getConfig().newXprEval().build( sXxpr, (Consumer) null, fnGroupWise );

        if( ! expr.getErrors().isEmpty() )
        {
            showError( expr.getErrors() );
            return;
        }

        if( ! expr.getVars().isEmpty() )
        {
            showError( "Can not evaluate expressions with variable(s): "+ UtilColls.toString( expr.getVars() ) );
            return;
        }

        Object result;

        try
        {
            result = expr.eval();

            result = (result == null) ? "null"
                                      : (result instanceof String) ? "\""+ result +"\""
                                                                   : result.toString();

            showResult( (String) result );
        }
        catch( Exception exc )
        {
            showError( exc.getMessage() );
        }
    }//GEN-LAST:event_btnTestActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnClearActionPerformed
    {//GEN-HEADEREND:event_btnClearActionPerformed
        pnlEditor.setText( null );
        lblResult.setText( "..." );
        pnlEditor.grabFocus();
    }//GEN-LAST:event_btnClearActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnTest;
    private javax.swing.JLabel lblResult;
    private javax.swing.JPanel pnlForEditor;
    // End of variables declaration//GEN-END:variables
}
