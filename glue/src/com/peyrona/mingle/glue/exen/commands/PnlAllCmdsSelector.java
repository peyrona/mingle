
package com.peyrona.mingle.glue.exen.commands;

import com.peyrona.mingle.glue.JTools;
import com.peyrona.mingle.glue.exen.ExEnClient;
import com.peyrona.mingle.glue.gswing.GList;
import com.peyrona.mingle.lang.interfaces.commands.ICommand;
import com.peyrona.mingle.lang.interfaces.commands.IDevice;
import com.peyrona.mingle.lang.interfaces.commands.IDriver;
import com.peyrona.mingle.lang.interfaces.commands.IRule;
import com.peyrona.mingle.lang.interfaces.commands.IScript;
import com.peyrona.mingle.lang.interfaces.network.INetClient;
import com.peyrona.mingle.lang.japi.ExEnComm;
import com.peyrona.mingle.lang.japi.UtilStr;
import com.peyrona.mingle.lang.japi.UtilSys;
import com.peyrona.mingle.lang.japi.UtilUnit;
import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.Icon;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import jiconfont.icons.font_awesome.FontAwesome;
import jiconfont.swing.IconFontSwing;

/**
 * Panel showing a listbox for every command and buttons to edit the highlighted.
 *
 * @author Francisco Jos√© Morero Peyrona
 *
 * Official web site at: <a href="https://github.com/peyrona/mingle">https://github.com/peyrona/mingle</a>
 */
public class PnlAllCmdsSelector
       extends javax.swing.JPanel
{
    private final ExEnClient     exenClient;
    private final GList<IScript> ltbScrDrv;
    private final GList<IScript> ltbScrInl;
    private final GList<IDriver> ltbDriver;
    private final GList<IDevice> ltbDevice;
    private final GList<IRule>   ltbRule;
    private final CommandWise    cmdWise;

    //------------------------------------------------------------------------//
    // CONSTRUCTOR

    public PnlAllCmdsSelector( ExEnClient exenClient )
    {
        this.exenClient = exenClient;
        this.cmdWise    = new CommandWise();      // Don't move: has to be here

        initComponents();

        ltbScrDrv = new GList<>( lstScrDri );
        ltbScrInl = new GList<>( lstScrInl );
        ltbDriver = new GList<>( lstDriver );
        ltbRule   = new GList<>( lstRule   );
        ltbDevice = new GList<>( lstDevice );

        initExtra();
        refreshButtons();
        this.exenClient.add( new ClientListener() );
    }

    //------------------------------------------------------------------------//
    // PUBLIC

    public List<IDevice> getDevices()
    {
        return ltbDevice.getAll();
    }

    public void deleteAll()
    {
        exenClient.sendSetOfCmds( ExEnComm.Request.Remove, cmdWise.getAll() );
    }

    public String getUneSourceCode()
    {
        JTools.showWaitFrame( "Generating Une source code..." );

        StringBuilder sb = new StringBuilder( 24 * UtilUnit.KILO_BYTE );

        sb.append( "#==================================================================================================================================\n" )
          .append( "#\n" )
          .append( "# Une source code generated by Glue (an Mingle GUI) on " ).append( LocalDate.now() ).append( " at " ).append( LocalTime.now().truncatedTo( ChronoUnit.SECONDS ) ).append( '\n' )
          .append( "#\n" )
          .append( "#==================================================================================================================================\n\n" );

        sb.append( "INCLUDE \"file://{*home.inc*}standard-includes.une\"\n" )
          .append( "#************************************\n" )
          .append( "# Add here any other needed include *\n" )
          .append( "#************************************\n\n" );

        cmdWise.getDevices().forEach( device -> sb.append( new PnlDevice( device, cmdWise ).getSourceCode() ).append( "\n\n" ) );
        cmdWise.getRules(  ).forEach( rule   -> sb.append( new PnlRule(   rule  , cmdWise ).getSourceCode() ).append( "\n\n" ) );
        cmdWise.getDrivers().forEach( driver -> sb.append( new PnlDriver( driver, cmdWise ).getSourceCode() ).append( "\n\n" ) );
        cmdWise.getScrInl( ).forEach( script -> sb.append( new PnlScrInl( script, cmdWise ).getSourceCode() ).append( "\n\n" ) );
        cmdWise.getScrDrv( ).forEach( script -> sb.append( new PnlScrDrv( script, cmdWise ).getSourceCode() ).append( "\n\n" ) );

        UtilStr.removeLast( sb, 1 );

        sb.append( "#>>>>>>>>>>>>>> EOF <<<<<<<<<<<<<<<<" );

        JTools.hideWaitFrame();

        return sb.toString();
    }

    //------------------------------------------------------------------------//
    // PRIVATE SCOPE

    /**
     * Passed request lives in the ExEn or was sent by someone (even this Glue) to the ExEn.
     *
     * @param cmd
     */
    private void added( ICommand cmd )
    {
        getListBoxFor( cmd ).add( cmd );
        refreshButtons();
    }

    /**
     * An existing request that was living in the ExEn was removed by someone (even this Glue) from the ExEn.
     *
     * @param cmd
     */
    private void removed( ICommand cmd )
    {
        getListBoxFor( cmd ).remove( cmd );
        refreshButtons();
    }

    private void clone( GList<? extends ICommand> listbox )
    {
        ICommand cmd   = listbox.getSelected();
        int      items = listbox.getAll().size();
        int      incr  = 1;                         // Used to suggest new commands name (e.g.: MyRule_1)
        String   name  = cmd.name() +'_'+ incr;

        while( true )
        {
            int n = 0;

            for( ; n < items; n++ )
            {
                if( listbox.get( n ).name().equalsIgnoreCase( name ) )
                    break;
            }

            if( n == items )
                break;
            else
                name = cmd.name() +'_'+ incr++;
        }

        exenClient.sendClone( cmd, name );
    }

    private void del( ICommand which )
    {
        String sExtra = "";

             if( which instanceof IScript ) sExtra = "\n(all Drivers and Devices associated with this Script will be also deleted)";
        else if( which instanceof IDriver ) sExtra = "\n(all Devices associated with this Driver will be also deleted)";

        if( JTools.confirm( "Are you sure you want to delete selected command?" + sExtra ) )
        {
            exenClient.sendDel( which );

            if( ! sExtra.isEmpty() )      // When Script or Driver is sent devices will be removed but it is
            {                             // not ExEn resposibility to inform about these collateral effects
                ltbScrDrv.clear();
                ltbScrInl.clear();
                ltbDriver.clear();
                ltbRule.clear();
                ltbDevice.clear();

                exenClient.sendList();
            }
        }
    }

    private void edit( final Class clazz, final ICommand cmd, boolean isEditable )
    {
        final JPanel panel;

        String sErr = null;

             if( (clazz == IRule.class  ) && cmdWise.getDevices().isEmpty() ) sErr = "Can not create a RULE when the list of DEVICES is empty";
        else if( (clazz == IDevice.class) && cmdWise.getDrivers().isEmpty() ) sErr = "Can not create a DEVICE when the list of DRIVERS is empty";

        if( sErr != null )
        {
            JTools.alert( sErr );
            return;
        }

        boolean isInlineScrip = (clazz == IScript.class) && (isEditable == true);   // Because Scripts for Drivers are not editable (this is a weak way to check it but it works)

             if( clazz == IDriver.class )  panel = new PnlDriver( (IDriver) cmd, cmdWise );
        else if( clazz == IDevice.class )  panel = new PnlDevice( (IDevice) cmd, cmdWise, exenClient );
        else if( clazz == IRule.class   )  panel = new PnlRule(   (IRule  ) cmd, cmdWise );
        else if( isInlineScrip          )  panel = new PnlScrInl( (IScript) cmd, cmdWise );
        else                               panel = new PnlScrDrv( (IScript) cmd, cmdWise );

        JTools.setEditable( panel, isEditable );

        String         title = clazz.getSimpleName().substring( 1 );
        ActionListener al    = null;

        if( isEditable )
        {
            al = (ActionEvent ae) ->
                                {
                                    String cmdNew = ((PnlCmdBase) panel).getTranspiled();

                                    if( cmdNew != null )
                                    {
                                        JTools.getParent( (Component) ae.getSource(), Dlg4Cmd.class ).dispose();

                                        ICommand cmd2Add = UtilSys.getConfig().newCILBuilder().build( cmdNew );

                                        if( cmd != null )
                                            exenClient.sendReplace( cmd, cmd2Add );
                                        else
                                            exenClient.sendAdd( cmd2Add );
                                    }
                                };
        }

        new Dlg4Cmd( title +" Editor", panel, al ).setVisible( true );
    }

    private GList getListBoxFor( ICommand cmd )
    {
             if( cmd instanceof IDriver )  return ltbDriver;
        else if( cmd instanceof IDevice )  return ltbDevice;
        else if( cmd instanceof IRule   )  return ltbRule;

        // Must be an Script

        return ((IScript) cmd).isInline() ? ltbScrInl : ltbScrDrv;
    }

    private void refreshButtons()
    {
        btnScrDrvShow.setEnabled(  ltbScrDrv.isNotEmpty() );

        btnScrInlEdit.setEnabled(  ltbScrInl.isNotEmpty() );
        btnScrInlClone.setEnabled( ltbScrInl.isNotEmpty() );
        btnScrInlDel.setEnabled(   ltbScrInl.isNotEmpty() );

        btnDriverShow.setEnabled(  ltbDriver.isNotEmpty() );
     // btnDriverClone.setEnabled( ltbDriver.isNotEmpty() );   NOT USED
     // btnDriverDel.setEnabled(   ltbDriver.isNotEmpty() );   NOT USED

        btnRuleEdit.setEnabled(    ltbRule.isNotEmpty()   );
        btnRuleClone.setEnabled(   ltbRule.isNotEmpty()   );
        btnRuleDel.setEnabled(     ltbRule.isNotEmpty()   );

        btnDeviceEdit.setEnabled(  ltbDevice.isNotEmpty() );
        btnDeviceClone.setEnabled( ltbDevice.isNotEmpty() );
        btnDeviceDel.setEnabled(   ltbDevice.isNotEmpty() );
    }

    private void initExtra()
    {
        Icon iconNew   = IconFontSwing.buildIcon( FontAwesome.PLUS  , 16, JTools.getIconColor() );
        Icon iconEdit  = IconFontSwing.buildIcon( FontAwesome.PENCIL, 16, JTools.getIconColor() );
        Icon iconClone = IconFontSwing.buildIcon( FontAwesome.CLONE , 16, JTools.getIconColor() );
        Icon iconDel   = IconFontSwing.buildIcon( FontAwesome.TRASH , 16, JTools.getIconColor() );
        Icon iconShow  = IconFontSwing.buildIcon( FontAwesome.EYE   , 16, JTools.getIconColor() );

        ltbScrDrv.setCaptionFn( (cmd) -> cmd.name() );
        ltbScrInl.setCaptionFn( (cmd) -> cmd.name() );
        ltbDriver.setCaptionFn( (cmd) -> cmd.name() );
        ltbDevice.setCaptionFn( (cmd) -> cmd.name() );
        ltbRule.setCaptionFn(   (cmd) -> cmd.name() );

        ltbScrDrv.onPicked( (cmd) -> edit( IScript.class, cmd, false ) );
        ltbScrInl.onPicked( (cmd) -> edit( IScript.class, cmd, true  ) );
        ltbDriver.onPicked( (cmd) -> edit( IDriver.class, cmd, false ) );
        ltbDevice.onPicked( (cmd) -> edit( IDevice.class, cmd, true  ) );
        ltbRule.onPicked(   (cmd) -> edit( IRule.class  , cmd, true  ) );

        btnScrDrvShow.setIcon( iconShow );
        btnScrDrvShow.addActionListener(  evt -> edit( IScript.class, ltbScrDrv.getSelected(), false ) );

        btnScrInlNew.setIcon(   iconNew   );
        btnScrInlEdit.setIcon(  iconEdit  );
        btnScrInlClone.setIcon( iconClone );
        btnScrInlDel.setIcon(   iconDel   );
        btnScrInlNew.addActionListener(   evt -> edit( IScript.class, null                   , true ) );
        btnScrInlEdit.addActionListener(  evt -> edit( IScript.class, ltbScrInl.getSelected(), true ) );
        btnScrInlClone.addActionListener( evt -> clone( ltbScrInl ) );
        btnScrInlDel.addActionListener(   evt -> del(   ltbScrInl.getSelected() ) );

        btnDriverShow.setIcon( iconShow );
        btnDriverNew.setIcon(  iconNew  );
        btnDriverClone.setVisible( false );    // ACTION NOT ALLOWED YET
        btnDriverDel.setVisible(   false );    // ACTION NOT ALLOWED YET
        btnDriverShow.addActionListener( evt -> edit( IDriver.class, ltbDriver.getSelected(), false ) );
        btnDriverNew.addActionListener(  evt -> edit( IDriver.class, null                   , true  ) );

        btnDeviceNew.setIcon(   iconNew   );
        btnDeviceEdit.setIcon(  iconEdit  );
        btnDeviceClone.setIcon( iconClone );
        btnDeviceDel.setIcon(   iconDel   );
        btnDeviceNew.addActionListener(   evt -> edit( IDevice.class, null                   , true ) );
        btnDeviceEdit.addActionListener(  evt -> edit( IDevice.class, ltbDevice.getSelected(), true ) );
        btnDeviceClone.addActionListener( evt -> clone( ltbDevice ) );
        btnDeviceDel.addActionListener(   evt -> del(   ltbDevice.getSelected() ) );

        btnRuleNew.setIcon(   iconNew );
        btnRuleEdit.setIcon(  iconEdit );
        btnRuleClone.setIcon( iconClone );
        btnRuleDel.setIcon(   iconDel );
        btnRuleNew.addActionListener(   evt -> edit( IRule.class, null                 , true ) );
        btnRuleEdit.addActionListener(  evt -> edit( IRule.class, ltbRule.getSelected(), true ) );
        btnRuleClone.addActionListener( evt -> clone( ltbRule ) );
        btnRuleDel.addActionListener(   evt -> del(   ltbRule.getSelected() ) );
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        pnlCommands = new javax.swing.JPanel();
        lblRules = new javax.swing.JLabel();
        btnRuleNew = new javax.swing.JButton();
        btnRuleEdit = new javax.swing.JButton();
        btnRuleClone = new javax.swing.JButton();
        btnRuleDel = new javax.swing.JButton();
        spRule = new javax.swing.JScrollPane();
        lstRule = new javax.swing.JList<>();
        lblDevices = new javax.swing.JLabel();
        btnDeviceNew = new javax.swing.JButton();
        btnDeviceEdit = new javax.swing.JButton();
        btnDeviceClone = new javax.swing.JButton();
        btnDeviceDel = new javax.swing.JButton();
        spDevice = new javax.swing.JScrollPane();
        lstDevice = new javax.swing.JList<>();
        lblDrivers = new javax.swing.JLabel();
        btnDriverShow = new javax.swing.JButton();
        btnDriverNew = new javax.swing.JButton();
        btnDriverClone = new javax.swing.JButton();
        btnDriverDel = new javax.swing.JButton();
        spDriver = new javax.swing.JScrollPane();
        lstDriver = new javax.swing.JList<>();
        lblScrInline = new javax.swing.JLabel();
        btnScrInlNew = new javax.swing.JButton();
        btnScrInlEdit = new javax.swing.JButton();
        btnScrInlClone = new javax.swing.JButton();
        btnScrInlDel = new javax.swing.JButton();
        spScrDriver = new javax.swing.JScrollPane();
        lstScrDri = new javax.swing.JList<>();
        spScrInline = new javax.swing.JScrollPane();
        lstScrInl = new javax.swing.JList<>();
        lblScrDriver = new javax.swing.JLabel();
        btnScrDrvShow = new javax.swing.JButton();

        setPreferredSize(new java.awt.Dimension(760, 8));

        pnlCommands.setName("pnlCommands"); // NOI18N
        pnlCommands.setPreferredSize(new java.awt.Dimension(919, 8));

        lblRules.setFont(lblRules.getFont().deriveFont(lblRules.getFont().getStyle() | java.awt.Font.BOLD, lblRules.getFont().getSize()+2));
        lblRules.setText("Rules");

        btnRuleNew.setToolTipText("Create new item");
        btnRuleNew.setFocusPainted(false);

        btnRuleEdit.setToolTipText("Edit highlighted item");
        btnRuleEdit.setFocusPainted(false);

        btnRuleClone.setToolTipText("Clone highlighted item");
        btnRuleClone.setFocusPainted(false);

        btnRuleDel.setToolTipText("Remove highlighted item");
        btnRuleDel.setFocusPainted(false);

        lstRule.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstRule.setVisibleRowCount(12);
        spRule.setViewportView(lstRule);

        lblDevices.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        lblDevices.setText("Devices");

        btnDeviceNew.setToolTipText("Create new item");
        btnDeviceNew.setFocusPainted(false);

        btnDeviceEdit.setToolTipText("Edit highlighted item");
        btnDeviceEdit.setFocusPainted(false);

        btnDeviceClone.setToolTipText("Clone highlighted item");
        btnDeviceClone.setFocusPainted(false);

        btnDeviceDel.setToolTipText("Remove highlighted item");
        btnDeviceDel.setFocusPainted(false);

        lstDevice.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstDevice.setVisibleRowCount(12);
        spDevice.setViewportView(lstDevice);

        lblDrivers.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        lblDrivers.setText("Drivers");

        btnDriverShow.setToolTipText("Create new item");
        btnDriverShow.setFocusPainted(false);

        btnDriverNew.setToolTipText("Edit highlighted item");
        btnDriverNew.setFocusPainted(false);

        btnDriverClone.setToolTipText("Clone highlighted item");
        btnDriverClone.setFocusPainted(false);

        btnDriverDel.setToolTipText("Remove highlighted item");
        btnDriverDel.setFocusPainted(false);

        lstDriver.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstDriver.setVisibleRowCount(12);
        spDriver.setViewportView(lstDriver);

        lblScrInline.setFont(new java.awt.Font("Ubuntu", 1, 13)); // NOI18N
        lblScrInline.setText("Scripts (Inline)");

        btnScrInlNew.setToolTipText("Create new item");
        btnScrInlNew.setFocusPainted(false);

        btnScrInlEdit.setToolTipText("Edit highlighted item");
        btnScrInlEdit.setFocusPainted(false);

        btnScrInlClone.setToolTipText("Clone highlighted item");
        btnScrInlClone.setFocusPainted(false);

        btnScrInlDel.setToolTipText("Remove highlighted item");
        btnScrInlDel.setFocusPainted(false);

        lstScrDri.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstScrDri.setVisibleRowCount(12);
        spScrDriver.setViewportView(lstScrDri);

        lstScrInl.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lstScrInl.setVisibleRowCount(12);
        spScrInline.setViewportView(lstScrInl);

        lblScrDriver.setFont(lblScrDriver.getFont().deriveFont(lblScrDriver.getFont().getStyle() | java.awt.Font.BOLD));
        lblScrDriver.setText("Scripts (all others)");

        btnScrDrvShow.setToolTipText("Create new item");
        btnScrDrvShow.setFocusPainted(false);

        javax.swing.GroupLayout pnlCommandsLayout = new javax.swing.GroupLayout(pnlCommands);
        pnlCommands.setLayout(pnlCommandsLayout);
        pnlCommandsLayout.setHorizontalGroup(
            pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlCommandsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblRules)
                    .addGroup(pnlCommandsLayout.createSequentialGroup()
                        .addGroup(pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnRuleNew)
                                .addComponent(btnRuleEdit)
                                .addComponent(btnRuleClone))
                            .addComponent(btnRuleDel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spRule, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addGroup(pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCommandsLayout.createSequentialGroup()
                        .addGroup(pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDeviceNew, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnDeviceEdit, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnDeviceClone, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnDeviceDel, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spDevice, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE))
                    .addComponent(lblDevices))
                .addGap(18, 18, 18)
                .addGroup(pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCommandsLayout.createSequentialGroup()
                        .addGroup(pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDriverShow)
                            .addComponent(btnDriverNew)
                            .addComponent(btnDriverDel)
                            .addComponent(btnDriverClone, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spDriver, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE))
                    .addComponent(lblDrivers))
                .addGap(18, 18, 18)
                .addGroup(pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCommandsLayout.createSequentialGroup()
                        .addGroup(pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblScrInline)
                            .addComponent(lblScrDriver))
                        .addContainerGap())
                    .addGroup(pnlCommandsLayout.createSequentialGroup()
                        .addGroup(pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnScrInlNew)
                            .addComponent(btnScrInlEdit)
                            .addComponent(btnScrInlDel)
                            .addComponent(btnScrInlClone))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spScrInline, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE))
                    .addGroup(pnlCommandsLayout.createSequentialGroup()
                        .addComponent(btnScrDrvShow)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spScrDriver))))
        );
        pnlCommandsLayout.setVerticalGroup(
            pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCommandsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlCommandsLayout.createSequentialGroup()
                        .addComponent(lblScrInline)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlCommandsLayout.createSequentialGroup()
                                .addComponent(spScrInline, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                .addGap(18, 18, 18))
                            .addGroup(pnlCommandsLayout.createSequentialGroup()
                                .addComponent(btnScrInlNew)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnScrInlEdit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnScrInlClone)
                                .addGap(18, 18, 18)
                                .addComponent(btnScrInlDel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)))
                        .addComponent(lblScrDriver)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(spScrDriver, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                            .addGroup(pnlCommandsLayout.createSequentialGroup()
                                .addComponent(btnScrDrvShow)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlCommandsLayout.createSequentialGroup()
                        .addComponent(lblDevices)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlCommandsLayout.createSequentialGroup()
                                .addComponent(btnDeviceNew)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDeviceEdit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDeviceClone)
                                .addGap(18, 18, 18)
                                .addComponent(btnDeviceDel))
                            .addComponent(spDevice)))
                    .addGroup(pnlCommandsLayout.createSequentialGroup()
                        .addComponent(lblDrivers)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlCommandsLayout.createSequentialGroup()
                                .addComponent(btnDriverShow)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDriverNew)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDriverClone)
                                .addGap(18, 18, 18)
                                .addComponent(btnDriverDel))
                            .addComponent(spDriver)))
                    .addGroup(pnlCommandsLayout.createSequentialGroup()
                        .addComponent(lblRules)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlCommandsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlCommandsLayout.createSequentialGroup()
                                .addComponent(btnRuleNew)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRuleEdit)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnRuleClone)
                                .addGap(18, 18, 18)
                                .addComponent(btnRuleDel)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(spRule))))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlCommands, javax.swing.GroupLayout.DEFAULT_SIZE, 754, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlCommands, javax.swing.GroupLayout.DEFAULT_SIZE, 431, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDeviceClone;
    private javax.swing.JButton btnDeviceDel;
    private javax.swing.JButton btnDeviceEdit;
    private javax.swing.JButton btnDeviceNew;
    private javax.swing.JButton btnDriverClone;
    private javax.swing.JButton btnDriverDel;
    private javax.swing.JButton btnDriverNew;
    private javax.swing.JButton btnDriverShow;
    private javax.swing.JButton btnRuleClone;
    private javax.swing.JButton btnRuleDel;
    private javax.swing.JButton btnRuleEdit;
    private javax.swing.JButton btnRuleNew;
    private javax.swing.JButton btnScrDrvShow;
    private javax.swing.JButton btnScrInlClone;
    private javax.swing.JButton btnScrInlDel;
    private javax.swing.JButton btnScrInlEdit;
    private javax.swing.JButton btnScrInlNew;
    private javax.swing.JLabel lblDevices;
    private javax.swing.JLabel lblDrivers;
    private javax.swing.JLabel lblRules;
    private javax.swing.JLabel lblScrDriver;
    private javax.swing.JLabel lblScrInline;
    private javax.swing.JList<IDevice> lstDevice;
    private javax.swing.JList<IDriver> lstDriver;
    private javax.swing.JList<IRule> lstRule;
    private javax.swing.JList<IScript> lstScrDri;
    private javax.swing.JList<IScript> lstScrInl;
    private javax.swing.JPanel pnlCommands;
    private javax.swing.JScrollPane spDevice;
    private javax.swing.JScrollPane spDriver;
    private javax.swing.JScrollPane spRule;
    private javax.swing.JScrollPane spScrDriver;
    private javax.swing.JScrollPane spScrInline;
    // End of variables declaration//GEN-END:variables

    //------------------------------------------------------------------------//
    // INNER CLASS
    // Instrumentation class similar to IRuntime that provides access to all
    // existing IComands in this ExEn
    //------------------------------------------------------------------------//
    public final class CommandWise
    {
        public List<ICommand> getAll()
        {
            List<ICommand> lstCmds = new ArrayList<>();

            lstCmds.addAll( getScrInl()  );
            lstCmds.addAll( getScrDrv()  );
            lstCmds.addAll( getDrivers() );
            lstCmds.addAll( getRules()   );
            lstCmds.addAll( getDevices() );

            return lstCmds;
        }

        public List<IScript> getScrInl()
        {
            return ltbScrInl.getAll();
        }

        public List<IScript> getScrDrv()
        {
            return ltbScrDrv.getAll();
        }

        public List<IDriver> getDrivers()
        {
            return ltbDriver.getAll();
        }

        public List<IRule> getRules()
        {
            return ltbRule.getAll();
        }

        public List<IDevice> getDevices()
        {
            return ltbDevice.getAll();
        }

        public boolean isScript( String name )
        {
            for( IScript scp : getScrInl() )
            {
                if( scp.name().equals( name ) )
                    return true;
            }

            return false;
        }

        public boolean isDriver( String name )
        {
            for( IDriver drv : getDrivers() )
            {
                if( drv.name().equals( name ) )
                    return true;
            }

            return false;
        }

        public boolean isRule( String name )
        {
            for( IRule rul : getRules() )
            {
                if( rul.name().equals( name ) )
                    return true;
            }

            return false;
        }

        public Set<String> getGroups( List<? extends IDevice> lstDevices )
        {
            Set<String> set = new HashSet<>();

            for( IDevice device : lstDevices )
                set.addAll( Arrays.asList( device.groups() ) );

            return set;
        }

        //------------------------------------------------------------------------//
        // PRIVATE CONSTRUCTOR

        private CommandWise()
        {
        }
    }

    //------------------------------------------------------------------------//
    // INNER CLASS
    //------------------------------------------------------------------------//
    private final class ClientListener implements INetClient.IListener
    {
        @Override
        public void onConnected( INetClient origin )
        {
            // Nothing to do
        }

        @Override
        public void onDisconnected( INetClient origin )
        {
            // Nothing to do
        }

        @Override
        public void onError( INetClient origin, Exception exc )
        {
            // Nothing to do
        }

        @Override
        public void onMessage( INetClient origin, String sJSON )
        {
            ExEnComm msg = ExEnComm.fromJSON( sJSON );

            SwingUtilities.invokeLater( () ->
                {
                    switch( msg.request )
                    {
                        case Listed:
                        case Added :
                            for( ICommand cmd : msg.getCommands() )
                                PnlAllCmdsSelector.this.added( cmd );

                            break;

                        case Removed:
                            for( ICommand cmd : msg.getCommands() )
                                PnlAllCmdsSelector.this.removed( cmd );

                            break;

                        case Error:
                            JTools.error( "Error received from ExEn at:"+ origin +"\n\n"+ msg.getErrorMsg() );
                            break;
                    }
                } );
        }
    }
}