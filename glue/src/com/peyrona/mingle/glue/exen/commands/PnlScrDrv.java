
package com.peyrona.mingle.glue.exen.commands;

import com.eclipsesource.json.Json;
import com.eclipsesource.json.JsonValue;
import com.peyrona.mingle.glue.JTools;
import com.peyrona.mingle.lang.interfaces.commands.ICmdKeys;
import com.peyrona.mingle.lang.interfaces.commands.IScript;
import com.peyrona.mingle.lang.japi.UtilColls;
import com.peyrona.mingle.lang.japi.UtilJson;
import com.peyrona.mingle.lang.japi.UtilSys;
import com.peyrona.mingle.lang.japi.UtilType;

/**
 *
 * @author Francisco Jos√© Morero Peyrona
 *
 * Official web site at: <a href="https://github.com/peyrona/mingle">https://github.com/peyrona/mingle</a>
 *
 * Official web site at: <a href="https://github.com/peyrona/mingle">https://github.com/peyrona/mingle</a>
 */
final class PnlScrDrv extends PnlCmdBase
{
    PnlScrDrv( IScript script, PnlAllCmdsSelector.CommandWise cmdWise )
    {
        super( cmdWise );

        initComponents();
        initExtra();

        if( script != null )
        {
            try
            {
                UtilJson json   = new UtilJson( cmdCodec.unbuild( script ) );
                String   sCall  = json.getString(  ICmdKeys.SCRIPT_CALL     );
                String   sLang  = json.getString(  ICmdKeys.SCRIPT_LANGUAGE );
                String[] asFrom = UtilType.convertArray( UtilJson.toArray( json.getArray( ICmdKeys.SCRIPT_FROM ) ), String.class );

                txtName.setText( script.name() );
                cmbLanguage.setSelectedIndex( JTools.getIndexForItem( cmbLanguage.getModel(), item -> item.toString().equalsIgnoreCase( sLang ) ) );
                txtCall.setText( sCall );
                txtFrom.setText( UtilColls.toString( asFrom ) );
            }
            catch( Exception ioe )
            {
                JTools.error(ioe, PnlScrDrv.this );
            }
        }
    }

    //------------------------------------------------------------------------//

    private void initExtra()
    {
        JTools.setJTextIsUneName( txtName );
        JTools.setJTextIsUneName( txtCall );

        // Fills combobox with available languages ----------------------------
        cmbLanguage.removeAllItems();

        JsonValue value = Json.parse( UtilSys.getConfig().get( "exen", "languages", "" ) );

        for( JsonValue jv : value.asArray() )
            cmbLanguage.addItem( jv.asObject().get( "name" ).asString() );
    }

    //------------------------------------------------------------------------//

    @Override
    protected String getSourceCode()
    {
        String sCall = txtCall.getText().trim();
        String sFrom = txtFrom.getText().trim();

        return "SCRIPT "  + txtName.getText().trim() +
               "\n\tLANGUAGE "+ cmbLanguage.getSelectedItem() +
               (sCall.isEmpty() ? "" : "\n\tCALL \""+ sCall +'"')+
               "\n\tFROM "+ sFrom;
    }

    @Override
    protected String getTranspiled()
    {
        return null;    // Scripts themselves can not be changed on the fly
    }

    //------------------------------------------------------------------------//

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        cmbLanguage = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtCall = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtFrom = new javax.swing.JTextArea();

        jLabel1.setText("LANGUAGE");

        cmbLanguage.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Java", "Javascript", "Python", "Une" }));

        jLabel2.setText("Name");

        txtName.setEditable(false);
        txtName.setColumns(24);
        txtName.setName("ControlName"); // NOI18N

        jLabel4.setText("CALL to");

        txtCall.setEditable(false);

        jLabel3.setText("From");

        txtFrom.setEditable(false);
        txtFrom.setColumns(20);
        txtFrom.setRows(5);
        jScrollPane1.setViewportView(txtFrom);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtName)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtCall)
                    .addComponent(jScrollPane1))
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(cmbLanguage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCall, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbLanguage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtCall;
    private javax.swing.JTextArea txtFrom;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables
}